#### build slowapp image
docker build ./ -t slowapp 

#### run docker container
docker run -p 8080:8080 -p 8000:8000 slowapp

#### try out request
curl "http://localhost:8080/prime/5000"


java -Xmx1G -Xms256m -XX:MaxMetaspaceSize=256m -XX:+UseParallelGC  -jar target/prime-calculator-1.0-SNAPSHOT.jar

#### to debug remotely
-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000

#### to enable jmx
-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1089 -Dcom.sun.management.jmxremote.rmi.port=1089 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=localhost -Djava.net.preferIPv6Addresses=true 

#### create debug configuration to connect to app inside docker
note the jdwp protocol

#### combined command to enable debug and jmx:
java -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1089 -Dcom.sun.management.jmxremote.rmi.port=1089 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=localhost -Xmx1G -Xms256m -XX:MaxMetaspaceSize=256m -XX:+UseParallelGC -Djava.net.preferIPv6Addresses=true -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000 -jar target/prime-calculator-1.0-SNAPSHOT.jar

#### start VisualVm - for those who can't find the jdk
VisualVM.app % ./Contents/MacOS/visualvm --jdkhome /Users/efrem/.sdkman/candidates/java/current

#### create a heapdump
1) get the process id with 
jps or ps -ef | grep 'java'

#### do the dump
jmap -dump:live,file=prime-dump.bin thepid

#### check out eclipse memory analyzer
https://www.eclipse.org/mat/downloads.php